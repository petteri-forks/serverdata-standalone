package com.example.servermaintenance.course;

import com.example.servermaintenance.account.Account;
import com.example.servermaintenance.course.domain.Course;
import com.example.servermaintenance.course.domain.CourseStudent;
import com.example.servermaintenance.course.domain.CourseStudentPart;
import com.example.servermaintenance.course.domain.SchemaPart;
import com.example.servermaintenance.interpreter.Interpreter;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.Comparator;
import java.util.List;

@Service
@AllArgsConstructor
public class CourseStudentService {
    private final CourseStudentRepository courseStudentRepository;
    private final CourseStudentPartRepository courseStudentPartRepository;
    private final SchemaPartRepository schemaPartRepository;

    @Transactional
    public CourseStudent generate(Course course, Account account, long id) {
        var schema = schemaPartRepository.findSchemaPartsByCourseOrderByOrder(course);
        var courseStudent = new CourseStudent(account, course, id);
        for (SchemaPart part : schema) {
            var courseStudentPart = new CourseStudentPart(courseStudent, part);
            if (!part.isAutogenerated()) {
                courseStudentPart.setData("");
            } else {
                var out = new Interpreter(part.getGenerationStatement())
                        .putLong("id", id)
                        .execute();
                courseStudentPart.setData(out);
            }
            courseStudent.addCourseStudentPart(courseStudentPartRepository.save(courseStudentPart));
        }
        return courseStudentRepository.save(courseStudent);
    }

    @Transactional
    public void generateNewPartStudentData(Course course, SchemaPart part) {
        for (var courseStudent : course.getCourseStudents()) {
            var courseStudentPart = new CourseStudentPart(courseStudent, part);
            if (!part.isAutogenerated()) {
                courseStudentPart.setData("");
            } else {
                var out = new Interpreter(part.getGenerationStatement())
                        .putLong("id", courseStudent.getCourseLocalIndex())
                        .execute();
                courseStudentPart.setData(out);
            }
            courseStudent.addCourseStudentPart(courseStudentPartRepository.save(courseStudentPart));
        }
    }

    public List<CourseStudent> getCourseStudents(Course course) {
        return courseStudentRepository.findCourseStudentsByCourseOrderByCourseLocalIndex(course);
    }

    public List<CourseStudentPart> getCourseStudentParts(Course course, Account account) {
        return courseStudentRepository.findFirstByCourseAndAccount(course, account)
                .getCourseStudentParts()
                .stream()
                .sorted(Comparator.comparingInt(a -> a.getSchemaPart().getOrder()))
                .toList();
    }

    public void saveStudentParts(List<CourseStudentPart> parts) {
        courseStudentPartRepository.saveAll(parts);
    }

    public void deleteCourseStudent(Course course, Account account) {
        var courseStudent = this.courseStudentRepository.findFirstByCourseAndAccount(course, account);
        if (courseStudent != null) {
            this.courseStudentRepository.delete(courseStudent);
        }
    }
}
